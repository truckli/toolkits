#!/bin/bash
# ztools

####################################################################
# A pile of global variables, please edit them according to your purpose
####################################################################

cmdname="zdocgrep";
version="2012 alpha"
#formula: cmdname options values parameters
formula="$cmdname word, where word is a regular expression confined in a double quotation mark";
func="Search a word in text, doc and odt files";
dependlist="dpkg, antiword, soffice"
# Option names
options="r h v";
loptions="recursive help version"
# Option value names. 0 for a no-value option.
values="0 0 0";

maxpara=1



# Option explanations. Separate each other with ${isep} sign.
# Within each explanation content, use ${lsep} sign when ever you want to 
# start a new line when printing.
# A pair of doubly written signs results into a string with no special meaning
# For instance, "${lsep}${lsep}" prints just one "${lsep}" instead of "\n"
optexpl="Search files recursively,\
@zline@  or sub directories will be omitted\
@zitem@Print help info\
@zitem@Print version info";
# Notice:options, values and optexpl must contain the same number of items.



notice="1.Needs support from antiword and soffice.
       2.In regular expressions, each '\\' sign should be writen as a '\\\\\\' sign "

#Action when no argument is given
# Need redefination.
defaultop()
{
	echo "Please specify a word. Use -h option for help"
	exit 1;
}


. libzutil.sh

####################################################################
#Procedure design. Unreusable part.
####################################################################

ismsdoc()
{
	mtchlen=`expr match "$1" '.*\.doc$'`
}

isodt()
{
	mtchlen=`expr match "$1" '.*\.odt$'`
}


searchdoc()
{
	local awname;
	local mtchdoc;

	awname=$1.antiword.tmp
	antiword $1 > $awname

	mtchdoc=`grep -c "$word" $awname`
	if [ $mtchdoc -ne 0 ] 
	then
		echo
		echo "$mtchdoc times found in $1:*************"	
		grep "$word" $awname
	fi
	rm -rf $awname
}

searchodt()
{
	#awname=$1.antiword.tmp
	#antiword $1 > $awname
	local pos	
	local nametruck
	local xmlname
	local mtchodt

	trucklen=$(($mtchlen-4))	
	nametruck=`expr substr $1 1 $trucklen`
	xmlname=$nametruck.xml



	[ ! -f $xmlname ] || rm -rf $xmlname

	soffice --headless --convert-to xml $1 > /dev/null

	if [ ! -r $xmlname ]
	then
		echo "Fail to generate an xml file. Neglect $1"
		return
	fi

	#Remove xml tags
	sed -i -e 's/<[^>]*>//g' $xmlname	

	mtchodt=`grep -c "$word" $xmlname`
	if [ $mtchodt -ne 0 ] 
	then
		echo
		echo "$mtchodt times found in $1:*************"	
		grep "$word" $xmlname
	fi
	rm -rf $xmlname
}


####################################################################
#Here we start the main program
####################################################################


if [ $on_h -eq 1 ]
then
	zusage
fi

if [ $on_v -eq 1 ]
then
	zversion
fi


#Check whether antiword and soffice are installed
zcheck_install antiword
zis_installed openoffice
if [ $is_installed -eq 0 ]
then
	zcheck_install libreoffice 
fi


word=$para1

if [ $on_r -eq 1 ];then
	filelist=`find . -type f`
else
	filelist=`find . -maxdepth 1 -type f`
fi


for item in $filelist
do
	zfinfo_contain "$item" ".*ELF.*"
	if [ $match_format -ne 0 ];then
		continue
	fi
	grepcount=`grep -c "$word" $item`
	if [ $grepcount -ne 0 ]
	then
		echo "Match found in $item:***************************"
		grep "$word" $item
		echo "************************************************"
		echo
	fi
done

#Seperate operation on each file format as they take rather different time
for item in $filelist
do
	ismsdoc $item
	[ $mtchlen -eq 0 ] || searchdoc $item
done

for item in $filelist
do
	isodt $item
	[ $mtchlen -eq 0 ] || searchodt $item
done










