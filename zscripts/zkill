#!/bin/sh
# ztools
# Search and kill processes by a keyword.


####################################################################
# Definitions
####################################################################

cmdname="zkill"
version="2012 alpha"
#formula: cmdname options values parameters
formula="$cmdname [options] [keyword]";
func="Search and kill processes by a keyword.";
# Option names
options="f l h v";
# Long option names
loptions="force list help version"
# Option value names. 0 for a no-value option.
values="0 0 0 0";
# Enable no-option mode when nonop=1, when it is legal for zero option
nonop=1;
# Number of parameters taken 
# minpara <= number of parameters <= maxpara
minpara=0;
maxpara=1;


#item separator symbol
isep="@zitem@"
#line separator symbol, to require a newline when printing
lsep="@zline@"

# Option explanations. Separate each other with ${isep} sign.
# Within each explanation content, use ${lsep} sign when ever you want to 
# start a new line when printing.
# A pair of doubly written signs results into a string with no special meaning
# For instance, "${lsep}${lsep}" prints just one "${lsep}" instead of "\n"
optexpl="Kill without ask for confirmation\
@zitem@Just print kill list without actually killing\
@zitem@Print help info\
@zitem@Print version info";
# Notice:options, values and optexpl must contain the same number of items.

#Action when no argument is given
# Need redefination.
defaultop()
{
	echo "Type $cmdname -h for help"
	exit 1;
}


# Add this line to parse arguments
. libzutil.sh

####################################################################
#Procedure design
####################################################################

# setup killlist
# Indispensable procedure for this routine
setlist()
{
	local prefix
	prefix=`expr substr $keyword 1 1`
	if [ $prefix = "-" ]
	then
		echo "Keyword '$keyword' starts with illegal '-' sign"
		exit 1
	fi
	killlist=`ps -ef|grep ${keyword}|grep -v ${cmdname}|grep -v "grep"|awk '{print $2}'`;
}

# Print killlist
# Indispensable procedure for this routine
# If killlist is empty, the routine exits here
printlist()
{
	if [ ${#killlist} -eq 0 ]
	then
		echo "No process need to be cleaned";
		exit 0;
	else
		echo "Kill list:";
		echo "**********************************************************";
		ps -p ${killlist};
		echo "**********************************************************";
	fi;
}

# Ask for user confirm to kill
# If confirmed not to kill, the routine exits here
confirm()
{
	if [ ${#killlist} -ne 0 ]
	then
		while true
		do
			echo "Are you sure you want them killed? [y/n]"
			read x;
			case "$x" in
				y | yes | Y ) break;;
				n | no | N ) echo "Well, let them leave."; exit 1;;
				* ) echo "Answer y or n!";
			esac
		done
	fi
}

# Execute the killing
execute()
{
	echo "Beginning slaughtering......";
	kill -9 ${killlist};
	echo "Slaugter done";
}

####################################################################
#Here we start the main program
####################################################################


if [ $on_h -eq 1 ]
then
	zusage;
fi

if [ $on_v -eq 1 ]
then
	zversion
fi


if [ $parac -eq 0 ]
then
	echo "You need to specify a keyword."
	echo "Type $cmdname -h for help."
	exit 1;
fi

keyword=$para1;

setlist;
printlist;

if [ $on_f -eq 0 -a $on_l -eq 0 ]
then
	confirm;
fi

if [ $on_l -eq 0 ]
then
	execute;
fi







